name: build

on:
  pull_request:
  push:
  release:
    types: [published]

jobs:


  Linux:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: local#
      - uses: mihails-strasuns/setup-dlang@v0.5.0
        with:
          compiler: dmd-latest
      - uses: olegtarasov/get-tag@v2
        id: tagName

        # tests
      - name: tests
        run: |
          xmake lua -v -D tests/run.lua

        # build artifacts
      - name: artifact
        run: |
          sudo apt-get install -y ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm
          git submodule update --init
          scripts/makepkg deb 
        # upload artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.amd64.deb
          path: artifacts/xmake.deb

        # publish release
      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/xmake.deb
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.amd64.deb
          asset_content_type: application/zip


  macOS:

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v1
      - uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: local#
      - uses: mihails-strasuns/setup-dlang@v0.5.0
        with:
          compiler: dmd-latest
      - uses: olegtarasov/get-tag@v2
        id: tagName

        # tests
      - name: tests
        run: |
          xmake lua -v -D tests/run.lua

        # build artifacts
      - name: artifact
        run: |
          brew install gnu-tar
          gem install --no-document fpm
          git submodule update --init
          scripts/makepkg osxpkg 
          scripts/archive-all
          scripts/makeself/build-runfile.sh 
        # upload artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.macosx.pkg
          path: artifacts/xmake.pkg
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.gz.run
          path: artifacts/xmake.gz.run
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.xz.run
          path: artifacts/xmake.xz.run
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.tar.gz
          path: artifacts/xmake.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.zip
          path: artifacts/xmake.zip

        # publish release
      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/xmake.pkg
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.macosx.pkg
          asset_content_type: application/zip

      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/xmake.gz.run
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.gz.run
          asset_content_type: application/zip

      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/xmake.xz.run
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.xz.run
          asset_content_type: application/zip

      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/xmake.tar.gz
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.tar.gz
          asset_content_type: application/zip

      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/xmake.zip
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.zip
          asset_content_type: application/zip


  Windows:
    strategy:
      matrix:
        arch: [x64, x86]

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1
      - uses: xmake-io/github-action-setup-xmake@v1
        with:
          # this is not supported, use dev branch instead
          # xmake-version: local#
          xmake-version: branch@dev
      - uses: mihails-strasuns/setup-dlang@v0.5.0
        with:
          compiler: dmd-latest
      - uses: olegtarasov/get-tag@v2
        id: tagName

        # prepare
      - name: prepare
        run: |
          # xmake
          xmake show
          git submodule update --init
          # nsis
          Invoke-WebRequest "https://github.com/xmake-mirror/nsis/releases/download/v30b3/nsis-3.04.zip" -UseBasicParsing -OutFile ./nsis.zip
          Invoke-WebRequest "https://github.com/xmake-mirror/nsis/releases/download/v30b3/nsis-3.04-strlen_8192.zip" -UseBasicParsing -OutFile ./nsis-longstr.zip
          Invoke-WebRequest "https://github.com/xmake-mirror/nsis/releases/download/v30b3/UAC.zip" -UseBasicParsing -OutFile ./nsis-uac.zip
          Expand-Archive ./nsis.zip -DestinationPath ./nsis
          Move-Item ./nsis/*/* ./nsis
          Expand-Archive ./nsis-longstr.zip -DestinationPath ./nsis -Force
          Expand-Archive ./nsis-uac.zip -DestinationPath ./nsis -Force
          Move-Item ./nsis/UAC.nsh ./nsis/Include/

        # build
      - name: build
        run: |
          xmake f -vD -P core -a ${{ matrix.arch }}
          xmake -vD -P core

        # tests
      - name: tests
        run: |
          Copy-Item ./core/build/xmake.exe ./xmake
          $Env:XMAKE_PROGRAM_DIR = $(Resolve-Path ./xmake)
          Set-Item -Path Env:Path -Value ($Env:XMAKE_PROGRAM_DIR + ";" + $Env:Path)
          xmake show
          xmake l -v private.utils.bcsave --rootname='@programdir' -x 'scripts/**|templates/**' xmake
          xmake lua -v -D tests/run.lua

        # build artifacts
      - name: artifact
        run: |
          # build installer
          (New-Item ./winenv/bin -ItemType Directory).FullName
          Invoke-WebRequest "https://github.com/xmake-mirror/gnuwin32-unzip/releases/download/5.51.1/unzip-5.51-1-bin.zip" -UseBasicParsing -OutFile .\unzip.zip
          Expand-Archive ./unzip.zip -DestinationPath ./unzip
          Copy-Item ./unzip/bin/unzip.exe ./winenv/bin
          Invoke-WebRequest "https://github.com/xmake-io/xmake-win64env/raw/master/bin/curl.exe" -UseBasicParsing -OutFile .\curl.exe
          Invoke-WebRequest "https://raw.githubusercontent.com/xmake-io/xmake-win64env/master/bin/curl-ca-bundle.crt" -UseBasicParsing -OutFile .\curl-ca-bundle.crt
          Copy-Item ./curl.exe ./winenv/bin
          Copy-Item ./curl-ca-bundle.crt ./winenv/bin
          $version = (Get-Command xmake/xmake.exe).FileVersionInfo
          ./nsis/makensis.exe /DMAJOR=$($version.ProductMajorPart) /DMINOR=$($version.ProductMinorPart) /DALTER=$($version.ProductBuildPart) /DBUILD=$($($version.ProductVersion -split '\+')[1]) /D${{ matrix.arch }} .\scripts\installer.nsi
          # archive
          Copy-Item ./*.md ./xmake
          Copy-Item ./winenv ./xmake -Recurse
          Add-Type -AssemblyName System.Text.Encoding
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          class FixedEncoder : System.Text.UTF8Encoding {
              FixedEncoder() : base($true) { }
              [byte[]] GetBytes([string] $s)
              {
                  $s = $s.Replace("\", "/")
                  return ([System.Text.UTF8Encoding]$this).GetBytes($s)
              }
          }
          Copy-Item ./xmake ./archive/xmake -Recurse
          [System.IO.Compression.ZipFile]::CreateFromDirectory("$PWD\archive", "$PWD\archive.zip", [System.IO.Compression.CompressionLevel]::Optimal, $false, [FixedEncoder]::new())
          (Get-FileHash .\archive.zip -Algorithm SHA256).Hash.ToLower() + " *xmake.zip`n" | Out-File ./shafile -Encoding ASCII -NoNewLine -Append

        # upload artifacts
      - name: set release arch name
        run: |
          if ("${{ matrix.arch }}" -eq "x64"){
            echo "::set-env name=RELEASE_NAME::win64"
          } else {
            echo "::set-env name=RELEASE_NAME::win32"
          }
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.${{ env.RELEASE_NAME }}.exe
          path: scripts/xmake.exe
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.${{ env.RELEASE_NAME }}.zip
          path: archive.zip
      - uses: actions/upload-artifact@v2
        with:
          name: xmake-latest.${{ env.RELEASE_NAME }}.sha256
          path: shafile

        # publish release
      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: scripts/xmake.exe
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.${{ env.RELEASE_NAME }}.exe
          asset_content_type: application/zip

      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: archive.zip
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.${{ env.RELEASE_NAME }}.zip
          asset_content_type: application/zip

      - name: publish
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: shafile
          asset_name: xmake-${{ steps.tagName.outputs.tag }}.${{ env.RELEASE_NAME }}.sha256
          asset_content_type: application/zip

